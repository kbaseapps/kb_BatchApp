# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_BatchApp(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_batch(self, params, context=None):
        """
        Runs a batch of the same app with a number of different input parameters.
        :param params: instance of type "BatchInput" (The inputs for a batch
           run on a single app. ---------- module_name - the name of the
           module to run. In an app like "MEGAHIT.run_megahit", this would be
           "MEGAHIT" method_name - the name of the method to run in the
           module. In the above, this would be "run_megahit" service_ver -
           the version of the app to run (or a github hash) wsid - the id of
           the workspace to associate with the job for sharing purposes meta
           - the job metadata batch_params - the list of input parameters for
           the app.) -> structure: parameter "module_name" of String,
           parameter "method_name" of String, parameter "service_ver" of
           String, parameter "wsid" of String, parameter "meta" of type
           "MetaInput" (Describes the metadata for a single batch run. Passed
           along to the Narrative Job Service on each child job started.
           ---------- cell_id - the unique id for the Narrative cell that
           starts the batch. run_id - the unique id assigned to the run from
           the Narrative. tag - the version tag (one of "release", "beta" or
           "dev") for the app being run in batch.) -> structure: parameter
           "cell_id" of String, parameter "run_id" of String, parameter "tag"
           of String, parameter "batch_params" of list of type "ParamsInput"
           (Describes the parameters for a single run in a batch. This
           contains both the set of parameters for a given run, along with
           the list of object UPAs to be used in setting provenance.
           ---------- params - an arbitrary list of inputs for the job run.
           source_ws_objects - the list of UPAs used as inputs to this job.
           These should be reflected somewhere in params.) -> structure:
           parameter "params" of list of unspecified object, parameter
           "source_ws_objects" of list of type "obj_ref" (An UPA for a single
           object.)
        :returns: instance of type "BatchResult" (The results of a batch run.
           -------- batch_result - a mapping from a string (child job id) to
           the result for that child job report_name - the name of the report
           for the entire batch run report_ref - the UPA of the report for
           the entire batch run) -> structure: parameter "batch_result" of
           mapping from String to unspecified object, parameter "report_name"
           of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_BatchApp.run_batch',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_BatchApp.status',
                                        [], self._service_ver, context)
